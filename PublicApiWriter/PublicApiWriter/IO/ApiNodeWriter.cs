using System;
using System.CodeDom.Compiler;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Gtc.AssemblyApi.Model;

namespace Gtc.AssemblyApi.IO
{
    internal class ApiNodeWriter
    {
        public async Task Write(IApiNode apiNode, TextWriter file, CancellationToken cancellationToken, bool recurse = true)
        {
            file.WriteLine(); //Indentation is only correct after a newline (note: WriteLineAsync doesn't seem to do indentation at all)
            await file.WriteAsync($"{AccessibilityPrefix(apiNode)}{apiNode.Signature}");
            if (recurse)
            {
                var orderedMembers = MembersInCanonicalOrder(apiNode);
                await WriteMembers(apiNode, file, cancellationToken, orderedMembers);
            }
        }

        private static IOrderedEnumerable<IApiNode> MembersInCanonicalOrder(IApiNode apiNode)
        {
            return apiNode.Members
                .OrderByDescending(m => m.SymbolAccessibility)
                .ThenBy(m => m.Importance)
                .ThenBy(m => m.Kind == SymbolKind.Namespace)
                .ThenBy(m => m.Name);
        }

        private async Task WriteMembers(IApiNode parentNode, TextWriter file, CancellationToken cancellationToken, IOrderedEnumerable<IApiNode> orderedMembers)
        {
            if (parentNode.Kind == SymbolKind.Property || parentNode.Kind == SymbolKind.Event)
            {
                await WriteAutogeneratedShortnamesInline(file, cancellationToken, orderedMembers);
            }
            else
            {
                await WriteMembersIndented(file, cancellationToken, orderedMembers);
            }
        }

        private async Task WriteMembersIndented(TextWriter file, CancellationToken cancellationToken, IOrderedEnumerable<IApiNode> orderedMembers)
        {
            using (var indentedTextWriter = new IndentedTextWriter(file, " ") {Indent = 2})
            {
                foreach (var member in orderedMembers)
                {
                    await Write(member, indentedTextWriter, cancellationToken);
                }
            }
        }

        private async Task WriteAutogeneratedShortnamesInline(TextWriter file, CancellationToken cancellationToken, IOrderedEnumerable<IApiNode> orderedMembers)
        {
            var accessibleMembers = orderedMembers.Select(GetShortNameFromAutoGeneratedMember);
            var memberString = $" {{ {string.Join("; ", accessibleMembers)}; }}";
            await file.WriteAsync(memberString);
        }

        private static string GetShortNameFromAutoGeneratedMember(IApiNode autoGeneratedNode)
        {
            var indexOfUnderscore = autoGeneratedNode.Name.IndexOf("_");
            if (indexOfUnderscore < 3) { throw new ArgumentOutOfRangeException(nameof(autoGeneratedNode), autoGeneratedNode.Name, "Expected a node with a name starting with something like get_, set_ ,add_ or remove_"); }

            var nameBeforeUnderscore = autoGeneratedNode.Name.Substring(0, indexOfUnderscore);
            return $"{AccessibilityPrefix(autoGeneratedNode)}{nameBeforeUnderscore}";
        }

        private static string AccessibilityPrefix(IApiNode node)
        {
            return node.Kind == SymbolKind.Namespace || node.Kind == SymbolKind.Assembly || node.SymbolAccessibility == Accessibility.NotApplicable ? ""
                : $"{node.SymbolAccessibility.ToString().ToLowerInvariant()} ";
        }
    }
}